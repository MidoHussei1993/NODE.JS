to run js file in cmd by node
node file.js   or node file
===========================
process.stdout.write('using proccess model') : proccess is the global object for node
like window in javascript
=====================
any web apis wait until call stack finish and then go to callback queue and then to callstack
==========================
to recive form cmd 
var userName = process.argv[2] //node file.js ali
==================================
REPL : read execute print loop
.editor: this is mode in REPL to write all code then test
        ctrl + c : used to cancel
        ctrl + d to finish my code
.save : to save all code i have been writen in file         
 .save newfile.js       
 .load : to file in REPL
 ==========================
 var os = reqiure('os');
 os.hostName();// the nome of computer
 if we write os and press Enter
 we will get evry thing inside this module
 =================
 util Module : in core module  
 prototypical inheritance can be implementing using util.inherits() method 


in es5
we declear to function 
function user(n,a)
{ 
  Person.call(this,n,a)//to make sure the object take all properties

}
function Person(mn , age){ //constructor
 this.name = mn;
 this.age = age
 this.address = 'ali'
 }
 Person.prototype.getName= function(){
    return this.name;
    }
    
    
    user.prototype = Person.prototype ; // make user see evry thing in prototype
    var me = new user('abc',22)
 
 
 
 in node js
 var util = require('util);
 // like make class inherat from anther class
 util.inherits(user,person)//user.prototype= person.prototype 
 
 HOW TO MAKE INHERTANCE USING UTIL MODULE
 
 var util = requrire('util');
 util.inherits(user,person)
 
 ========================================
 EVENT MODULE;
 EVER THING IN NODE IS EVENT BASE
 * all objects that emit events are instances of the eventemitter
 * these objects expose an eventEmitter.on() function that allows one or more functions to be 
 attacher to named events emitted by object
 when the eventemitter objedt emits an event , all of the functions attached to that specific
 event are called synchronously
 * any object can become an eventemitter through inheritance using 
   util.inherits() method or ES6 extebds
   
   var myevent = require('events')
   class eventEmitter extends myevent{}
   
   var myeventEmitter = new eventEmitter();
   
   myeventEmitter.on('myclick',function(){ // fire more than one time
      console.log('myclick event fired')
      }
       myeventEmitter.once('click',function(){ // fire only one time
      console.log('myclick event fired')
      }
      
  TO FIRE THE EVENT
   myeventEmitter.emit('myclick')
    
   
   
    myeventEmitter.on('myclick',eventHandler)// handeler is function 
    myeventEmitter.removeListener('myclick',eventHandler)
     
   =========================
   CUSTOM MODULE : - 
   *creating amodule is easy,just put your javascript code in a separate.js file and
   include it in your code by using keyword require like
   var mymodule = require('./mymodule.js');
   
   *to require local created module, we have to pass relative path to its.js
   so nodejs knows that its not going to looking for it in node_module folder
   
   
   var x = 10
    var myfunction = ()=>console.log(10)
   or
    module.export.myfunction = ()=>console.log(10)
   
   to get module inside module
   

   
   
   in fileName.js
   
   module.exports.x
   or 
   module.export.xx = x
   
   
   
      var nodescope = require(./fileName.js')
      nodescope.myfunction();
      nodescope.x;
   ===============================================================
   File system module :
   all its method have asynchronous and synchronous forms
   
   //this happens asynch--> non blocking
   console.log('start')
   var fs = require('fs');
   fs.readFile('filename.txt',function(err,data){
   console.log('this is a new way to read')
   console.log('content + data) // data should convert to string
   });
    console.log('finish')
    
    start
    finshis
    text from filename
    
    ------
   
    console.log('start')
   //to make it synch --> blocking
   var data = fs.readFileSync('readfile.txt')
   console.log('this is anew way to read')
   console.log('content' + data)
   
    console.log('finish')
   
   
   start
   text form filename
   finish
   
  ---------------
  write in file
  
  fs.writeFile('filename.txt','text we want to write in file') // if file is not exist it will create by node
  fs.writeFilesync('filename.txt','text we want to write in file') // not do any thing untill finish write
  
  // this function is fire if any one make change in file
  // any change will happen to file this function will fire and tell us about the previouse and current value
  fs.watchFile('filename',function(prev,current){ 
     console.log('file changed ...')
  
  }) 
   
=====================================================
http module :
var http = require('http')
http.createServer(function(request , response ){
response.writeHead(200)
response.write('welcom to nodejs world')// response body
response.end(); so client knows it has recived all data
});
http.llesten(3000);
   
   
   
---------------------------
var http = require('http')

http.createServer(function(req,res){
  res.writeHead(200 ,{"content-type":"text/plain")
  res.write('this is text from server')
  res.end
}).listen(3000)
    
===================
npm nodemon -g

nodemone server.js
to create sever 
======================================
   var http = require(http);
   var fs = require('fs');
   
   var htmlFile = fs.readFile('http.html')
   var cssFile = fs.readFile('http.css')
   
   [
   http.createServer(function(req,res){
    fs.readFile('',function(data){
     res.writeHead(200,{'content-type' : 'text/html'})
     res.write(data)
     res.end();
     })
   ]  
     
     ---------------------
     
   [
     if(req.url === "/http.css")
     {
       res.writeHead(200 , {
        "content-type":"text/css"
        });
       res.write(cssFile)
     }
     else{
       res.writeHead(200 , {
        "content-type":"text/html"
        });
       res.write(htmlFile)
         }
   
   
   ]   
     
    http.write();
    http.end();
   
   }).listen(3000)
 
 
   
   ======================================
   npm init 
   for initialize package.json
======================================
install express
     
npm install express
     
     
     
  var express = require('express');  
  var http = require('http');     
  var path = require('path');   
     
  http.createServer(app)
  app.get('/',function(req,res){
   
    res.send('this is aresponse from server');
  
  })
  
  app.get("/abc",function(req,res){

    res.send('this is aresponse from abc');
    response.sendFile(path.join(__dirname,"http.html"))
  })
  
    app.get('/xyz',function(req,res){
   
    res.redirect('/');
  
  })
  
    app.get('/name/:nm',function(req,res){
    console.log(req,params.nm)
    res.redirect('/');
  
  })
     app.get('/abc',function(req,res){
    var user = req,params.nm 
    res.send('welcome' + user);
  
  })
  
 app.post('/name/:nm',function(req,res){
     response.sendFile(path.join(__dirname,"http.html"))
  
  })
     
 app.listen(3000)    
     

   
  app.post('/name/:nm',function(req,res){
     response.sendFile(path.join(__dirname,"http.html"))
  
  })
 
 
      
MIDDEL WARE IN ESPRESS : 

 app.post('/name/:nm',function(req,res,nxt){
 //can not go to next function untill call nxt()
 
 
 },function(req,res){
     response.sendFile(path.join(__dirname,"http.html"))
  
  })
     
 app.all("/abc",function(req,res,nxt){ /// all for ger or post for abc root
     
  });
  
  //params middleware
  app.param('nm',function(req,res,nxt,val){
  console.log(req.params.nm) == console.log(val);
  req.params.nm=" ali " // this mean the parameter will be static will be always equal ali
  nxt();
  
  
  })
 
// build-in middelware
// tell express whree static file is located
app.use(express.static("./public")
 
 
 res.body.nameinform
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
