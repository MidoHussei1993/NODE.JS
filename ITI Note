to run js file in cmd by node
node file.js   or node file
===========================
process.stdout.write('using proccess model') : proccess is the global object for node
like window in javascript
=====================
any web apis wait until call stack finish and then go to callback queue and then to callstack
==========================
to recive form cmd 
var userName = process.argv[2] //node file.js ali
==================================
REPL : read execute print loop
.editor: this is mode in REPL to write all code then test
        ctrl + c : used to cancel
        ctrl + d to finish my code
.save : to save all code i have been writen in file         
 .save newfile.js       
 .load : to file in REPL
 ==========================
 var os = reqiure('os');
 os.hostName();// the nome of computer
 if we write os and press Enter
 we will get evry thing inside this module
 =================
 util Module : in core module  
 prototypical inheritance can be implementing using util.inherits() method 


in es5
we declear to function 
function user(n,a)
{ 
  Person.call(this,n,a)//to make sure the object take all properties

}
function Person(mn , age){ //constructor
 this.name = mn;
 this.age = age
 this.address = 'ali'
 }
 Person.prototype.getName= function(){
    return this.name;
    }
    
    
    user.prototype = Person.prototype ; // make user see evry thing in prototype
    var me = new user('abc',22)
 
 
 
 in node js
 var util = require('util);
 // like make class inherat from anther class
 util.inherits(user,person)//user.prototype= person.prototype 
 
 HOW TO MAKE INHERTANCE USING UTIL MODULE
 
 var util = requrire('util');
 util.inherits(user,person)
 
 ========================================
 EVENT MODULE;
 EVER THING IN NODE IS EVENT BASE
 * all objects that emit events are instances of the eventemitter
 * these objects expose an eventEmitter.on() function that allows one or more functions to be 
 attacher to named events emitted by object
 when the eventemitter objedt emits an event , all of the functions attached to that specific
 event are called synchronously
 * any object can become an eventemitter through inheritance using 
   util.inherits() method or ES6 extebds
   
   var myevent = require('events')
   class eventEmitter extends myevent{}
   
   var myeventEmitter = new eventEmitter();
   
   myeventEmitter.on('myclick',function(){ // fire more than one time
      console.log('myclick event fired')
      }
       myeventEmitter.once('click',function(){ // fire only one time
      console.log('myclick event fired')
      }
      
  TO FIRE THE EVENT
   myeventEmitter.emit('myclick')
    
   
   
    myeventEmitter.on('myclick',eventHandler)// handeler is function 
    myeventEmitter.removeListener('myclick',eventHandler)
     
   =========================
   CUSTOM MODULE : - 
   *creating amodule is easy,just put your javascript code in a separate.js file and
   include it in your code by using keyword require like
   var mymodule = require('./mymodule.js');
   
   *to require local created module, we have to pass relative path to its.js
   so nodejs knows that its not going to looking for it in node_module folder
   
   
   var x = 10
   var nyf = ()=>console.log(10)
   
   to get module inside module
   
   var nodescope = require(./filname.js')
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
    
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
